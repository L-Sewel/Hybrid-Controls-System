import logging
import socket
import queue
from message import Message


class NoConnection(Exception):
    """
    A custom exception raised when attempting to utilize the client when no connection has been made
    """
    def __str__(self):
        return "NoConnection"


class ConnectionFailure(Exception):
    """
    A custom exception raised when the client fails to connect to a server
    """
    def __str__(self):
        return "ConnectionFailure"


class Client:

    def __init__(self, host, port):
        """
        Initializes the client object
        Creates an address tuple from the given host and port
        :param host: The IP of the client, IS HARD CODED, NEED TO CHANGE IF IP OF SERVER CHANGES
        :param port: The port that the socket will be connecting on. Hard coded to 9999
        """
        self.HOST = host  # The ip of the server that the client connects to
        self.PORT = port  # The port the client connects on
        self.address = (self.HOST, self.PORT)  # A tuple formed from the given host and ip, used for socket object
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # Initializes the client socket
        self.message_queue = queue.Queue()  # A queue used to store the incoming instructions from the server

    def initialize_connection(self):
        """
        Connects the the server. The server must be running first in order to make this work
        """
        try:
            self.client.connect(self.address)   # connects the client to the server, server must be running first
        except Exception:  # this is the error generated by a invalid address or a timed out connection attempt
            raise ConnectionFailure

    def end_connection(self):
        """
        Cleans up the socket objects
        """
        self.client.close()  # cleans up the socket

    def write_msg(self, msg):
        """
        Send msg to server
        :param msg: The state being sent
        :return: nothing
        """
        try:
            self.client.sendall((msg).encode())  # send off the data
        except socket.error: # this will fail if there is no connection initialized.
            raise NoConnection

    def read_msg_to_queue(self):
        """
        Receive data from server and generates a Message object, then add it to the instruction queue
        :return: High priority message
        """
        try:
            msg = Message(self.client.recv(1024).decode()) # receives data which it decodes() into a string
            logging.info(msg)
            if "ABORT" in msg.getLabels():
                with self.message_queue.queue.mutex:
                    self.message_queue.clear()
            self.message_queue.put(msg)  # adds message to the queue
        except socket.error as e:
            print(f'Client receive_states: {e}')
            raise NoConnection
        return None
